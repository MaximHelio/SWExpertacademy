# 카운팅 정렬: 자료의 개수가 주어지고, 자료값이 양의 정수여야 함
#왜냐면 우리는 자료값을 배열의 인덱스로 갖다 쓸 것이니..
#파이썬은 음수를 인덱스로 쓸 수 있긴 하지만, 다른 언어는 반환 못함
# 공간은 N개밖에 없는데, 음수까지 쓸 순 없음
# 공간을 쓴다는 말은 메모리가 이미 있다는 말
# 이미 공간이 만들어져 있어야 함. 안그러면 index out of range
# 카운팅을 하려면, 미리 공간을 만들어 놔야하고, 그러려면 사이즈를 알아야 함, 어떤 값이 들어오는지를 알아야 함,
# 이 말은 값의 최대값과 최소값을 알아야함. 가장 큰 값을 알아야함
# 값의 범위의 가장 큰 값을 알아야함 / 값의 범위/ 그렇다고 무조건 카운팅 정렬을 쓸 수 있는 건 아니고, 이 값의 범위가 너무 크면, 못 씀
# 일반적으로, 메모리 제약이 있음. 너무 범위가 크면, 내가 쓸 수 있는 프로그램 내 서버에서 메모리의 범위를 벗어날 수 있음
# 보통, 문제마다 다르지만 10000정도까지는 충분히 써도 됨, 백만까지는 쓸 수 있음ㄴ
# 하지만 파이썬은 메모리를 많이 먹음 하지만 IM시험에서는 충분히 써도 무방함
# 최빈수가 여러 개일때는 가장 큰 점수를 출력하라.
# 제일 뒤에 있는 것을 찾아라
# 선택 정렬
T = int(input())
for tc in range(1, T+1):
    tc_num = int(input())

    score = list(map(int, input().split()))
    # 점수의 빈도수를 계산
    cnt = [0] * 101  # 점수의 범위 0 ~ 100

    for val in scores:
        cnt[val] += 1

    # 최빈수 찾기 --> cnt[]에서 최대값이 저장된 인덱스 찾기
    # 여러 개면 큰 점수값을 찾는다.
    idx = 0
    for i in range(1, 101):
        if cnt[idx] <= cnt[i]:
            idx = i
    print(idx)